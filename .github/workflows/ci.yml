name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: "1.23"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run vet
      run: go vet ./...
      
    - name: Run fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Generate manifests
      run: make manifests
      
    - name: Generate code
      run: make generate
      
    - name: Check for uncommitted changes
      run: |
        git diff --exit-code
        if [ $? -ne 0 ]; then
          echo "Please run 'make manifests generate' and commit the changes"
          exit 1
        fi
        
    - name: Run tests
      run: make test
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./cover.out
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  e2e:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Create Kind cluster
      uses: helm/kind-action@v1
      with:
        cluster_name: metrics-server-test
        wait: 300s
        
    - name: Load Docker image into Kind
      run: |
        IMAGE_TAG="${{ github.sha }}"
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${IMAGE_TAG}
        kind load docker-image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${IMAGE_TAG} --name metrics-server-test
        
    - name: Install CRDs
      run: make install
      
    - name: Deploy operator
      run: |
        IMAGE_TAG="${{ github.sha }}"
        make deploy IMG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${IMAGE_TAG}
        
    - name: Wait for operator to be ready
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/metrics-server-operator-controller-manager -n metrics-server-operator-system
        
    - name: Run e2e tests
      run: make test-e2e
      
    - name: Collect logs on failure
      if: failure()
      run: |
        echo "Collecting operator logs..."
        kubectl logs -l control-plane=controller-manager -n metrics-server-operator-system
        echo "Collecting events..."
        kubectl get events -A --sort-by=.lastTimestamp
        echo "Collecting pod status..."
        kubectl get pods -A