name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  golangci-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1.6

  gosec:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec.sarif ./...'

      - name: Upload gosec SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif

  trivy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy.sarif'

      - name: Upload trivy SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Generate manifests
        run: make manifests

      - name: Generate code
        run: make generate

      - name: Check for uncommitted changes
        run: |
          git diff --exit-code
          if [ $? -ne 0 ]; then
            echo "Please run 'make manifests generate' and commit the changes"
            exit 1
          fi

      - name: Run tests
        run: make test

      - name: Go coverage comment
        uses: vladopajic/go-test-coverage@v2
        with:
          profile: cover.out

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Set up Depot
        uses: depot/setup-action@v1

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: depot/build-push-action@v1
        with:
          project: jd10vkmkwv
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  test-e2e:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Set up Depot
        uses: depot/setup-action@v1

      - name: Build Docker image
        uses: depot/build-push-action@v1
        with:
          project: jd10vkmkwv
          context: .
          load: true
          tags: ghcr.io/vexxhost/metrics-server-operator:latest

      - name: Create Kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: kind

      - name: Load Docker image into Kind
        run: |
          kind load docker-image ghcr.io/vexxhost/metrics-server-operator:latest

      - name: Run e2e tests
        run: make test-e2e

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "Collecting operator logs..."
          kubectl logs -l control-plane=controller-manager -n metrics-server-operator-system
          echo "Collecting events..."
          kubectl get events -A --sort-by=.lastTimestamp
          echo "Collecting pod status..."
          kubectl get pods -A